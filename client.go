/*
Package batester

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package batester

import (
    "context"
    "fmt"
    "github.com/apimatic/go-core-runtime/https"
    "net/http"
)

const UserAgent = "APIMATIC 3.0"
// Client is an interface representing the main client for accessing configuration and controllers.
type ClientInterface interface {
    Configuration() Configuration
    CloneWithConfiguration(options ...ConfigurationOptions) ClientInterface
    APIController() *APIController
}

// client is an implementation of the Client interface.
type client struct {
    callBuilderFactory https.CallBuilderFactory
    configuration      Configuration
    apiController      APIController
}

// NewClient is the constructor for creating a new client instance.
// It takes a Configuration object as a parameter and returns the Client interface.
func NewClient(configuration Configuration) ClientInterface {
    client := &client{
        configuration: configuration,
    }
    
    client.callBuilderFactory = callBuilderHandler(
    	func(server string) string {
    		if server == "" {
    			server = "default"
    		}
    		return getBaseUri(Server(server), client.configuration)
    	},
    	createAuthenticationFromConfig(configuration),
    	https.NewHttpClient(configuration.HttpConfiguration()),
    	configuration.httpConfiguration.RetryConfiguration(),
    	https.Indexed,
        withUserAgent(UserAgent),
    )
    
    baseController := NewBaseController(client)
    client.apiController = *NewAPIController(*baseController)
    return client
}

// Configuration returns the configuration instance of the client.
func (c *client) Configuration() Configuration {
    return c.configuration
}

// CloneWithConfiguration returns a new copy with the provided options of the configuration instance of the client.
func (c *client) CloneWithConfiguration(options ...ConfigurationOptions) ClientInterface {
    return NewClient(c.configuration.cloneWithOptions(options...))
}

// APIController returns the apiController instance of the client.
func (c *client) APIController() *APIController {
    return &c.apiController
}

// GetCallBuilder returns the CallBuilderFactory used by the client.
func (c *client) GetCallBuilder() https.CallBuilderFactory {
    return c.callBuilderFactory
}

// getBaseUri returns the base URI based on the server and configuration.
func getBaseUri(
    server Server,
    configuration Configuration) string {
    if configuration.Environment() == Environment(PRODUCTION) {
        if server == Server(ENUMDEFAULT) {
            return fmt.Sprintf("http://apimatic.hopto.org:%v", configuration.Suites())
        }
        if server == Server(AUTHSERVER) {
            return "http://apimaticauth.hopto.org:3000"
        }
    }
    if configuration.Environment() == Environment(TESTING) {
        if server == Server(ENUMDEFAULT) {
            return "http://localhost:3000"
        }
        if server == Server(AUTHSERVER) {
            return "http://apimaticauth.xhopto.org:3000"
        }
    }
    return "TODO: Select a valid server."
}

// clientOptions is a function type representing options for the client.
type clientOptions func(cb https.CallBuilder)

// callBuilderHandler creates the call builder factory with various options.
func callBuilderHandler(
    baseUrlProvider func(server string) string,
    auth map[string]https.AuthInterface,
    httpClient https.HttpClient,
    retryConfig RetryConfiguration,
    arraySerializationOption https.ArraySerializationOption,
    opts ...clientOptions) https.CallBuilderFactory {
    callBuilderFactory := https.CreateCallBuilderFactory(baseUrlProvider, auth, httpClient, retryConfig, arraySerializationOption)
    return tap(callBuilderFactory, opts...)
}

// tap is a utility function to apply client options to the call builder factory.
func tap(
    callBuilderFactory https.CallBuilderFactory,
    opts ...clientOptions) https.CallBuilderFactory {
    return func(ctx context.Context, httpMethod, path string) https.CallBuilder {
    	callBuilder := callBuilderFactory(ctx, httpMethod, path)
    	for _, opt := range opts {
    		opt(callBuilder)
    	}
    	return callBuilder
    }
}

// withUserAgent is an option to add a user agent header to the HTTP request.
func withUserAgent(userAgent string) clientOptions {
    f := func(request *http.Request) *http.Request {
    	request.Header.Set("user-agent", userAgent)
    	return request
    }
    return func(cb https.CallBuilder) {
    	cb.InterceptRequest(f)
    }
}
